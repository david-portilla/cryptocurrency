{"version":3,"sources":["cryptomonedas.png","hooks/useCurrency.js","hooks/useCriptoCurrency.js","components/Error.js","components/Form.js","components/Quote.js","components/Spinner.js","App.js","reportWebVitals.js","index.js"],"names":["Label","styled","label","SelectTag","select","useCurrency","initialState","options","useState","state","updateState","onChange","e","target","value","map","option","cod","name","useCriptoCurrency","CoinInfo","Name","FullName","Id","ErrorMessage","p","mError","message","Button","input","Form","setCurrency","setCriptoCurrency","criptoList","saveCriptoList","error","setError","currency","Selection","criptoCurrency","SelectCripto","useEffect","a","axios","get","result","data","Data","getCriptoList","onSubmit","preventDefault","Error","type","DivResult","div","Info","Price","Quote","Object","keys","length","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","className","Wrapper","Image","img","Heading","h1","App","setResult","loading","showLoading","URL","setTimeout","DISPLAY","getQuote","console","log","component","src","image","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAAe,MAA0B,0C,ucCIzC,IAAMA,EAAQC,IAAOC,MAAV,KAULC,EAAYF,IAAOG,OAAV,KA4CAC,EAlCK,SAACH,EAAOI,EAAcC,GAAY,MAEvBC,mBAASF,GAFc,mBAE7CG,EAF6C,KAEtCC,EAFsC,KAyBpD,MAAO,CAACD,EArBU,kBAChB,eAAC,WAAD,WACE,cAACT,EAAD,UAAQE,IACR,eAACC,EAAD,CACEQ,SAAU,SAAAC,GAAC,OAAIF,EAAYE,EAAEC,OAAOC,QACpCA,MAAOL,EAFT,UAIE,wBAAQK,MAAM,GAAd,qCACCP,EAAQQ,KAAI,SAAAC,GAAM,OACjB,wBAEEF,MAAOE,EAAOC,IAFhB,SAIGD,EAAOE,MAHHF,EAAOC,eAWIP,I,ucC7C5B,IAAMV,EAAQC,IAAOC,MAAV,KAULC,EAAYF,IAAOG,OAAV,KA6CAe,EAnCW,SAACjB,EAAOI,EAAcC,GAAY,MAG7BC,mBAASF,GAHoB,mBAGnDG,EAHmD,KAG5CC,EAH4C,KA0B1D,MAAO,CAACD,EArBa,kBACnB,eAAC,WAAD,WACE,cAAC,EAAD,UAAQP,IACR,eAAC,EAAD,CACES,SAAU,SAAAC,GAAC,OAAIF,EAAYE,EAAEC,OAAOC,QACpCA,MAAOL,EAFT,UAIE,wBAAQK,MAAM,GAAd,mCACCP,EAAQQ,KAAI,SAAAC,GAAM,OACjB,wBAEEF,MAAOE,EAAOI,SAASC,KAFzB,SAIGL,EAAOI,SAASE,UAHZN,EAAOI,SAASG,cAWFb,I,6RC9C/B,IAAMc,EAAevB,IAAOwB,EAAV,KAqBHC,EAVA,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACf,OACE,cAACH,EAAD,UAAeG,K,kVCTnB,IAAMC,EAAS3B,IAAO4B,MAAV,KAwFGC,EAvEF,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,YAAaC,EAAuB,EAAvBA,kBAAuB,EAGZxB,mBAAS,IAHG,mBAG1CyB,EAH0C,KAG9BC,EAH8B,OAIvB1B,oBAAS,GAJc,mBAI1C2B,EAJ0C,KAInCC,EAJmC,OAgB/C/B,EAAY,uBAAwB,GATnB,CACjB,CAACY,IAAK,MAAOC,KAAM,mBACnB,CAACD,IAAK,MAAOC,KAAM,kBACnB,CAACD,IAAK,MAAOC,KAAM,gBACnB,CAACD,IAAK,MAAOC,KAAM,UAX4B,mBAe1CmB,EAf0C,KAehCC,EAfgC,OAoB/CnB,EAAkB,8BAA+B,GAAIc,GApBN,mBAmB1CM,EAnB0C,KAmB1BC,EAnB0B,KAuBjDC,qBAAU,YACW,uCAAG,4BAAAC,EAAA,4DACR,0EADQ,SAECC,IAAMC,IADf,2EADQ,OAEdC,EAFc,OAGpBX,EAAeW,EAAOC,KAAKC,MAHP,2CAAH,qDAKnBC,KACC,IAkBH,OACE,uBACEC,SAjBkB,SAAArC,GACpBA,EAAEsC,iBAGe,KAAbb,GAAsC,KAAnBE,GAMvBH,GAAS,GACTL,EAAYM,GACZL,EAAkBO,IAPhBH,GAAS,IAWX,UAIGD,EAAQ,cAACgB,EAAD,CAAOxB,QAAQ,4BAA+B,KAEvD,cAACW,EAAD,IACA,cAACE,EAAD,IAEA,cAACZ,EAAD,CACEwB,KAAK,SACLtC,MAAM,kB,uYCjFd,IAAMuC,EAAYpD,IAAOqD,IAAV,KAKTC,EAAOtD,IAAOwB,EAAV,KAQJ+B,EAAQvD,IAAOwB,EAAV,KAwBIgC,EAhBD,SAAC,GAAc,IAAbZ,EAAY,EAAZA,OACd,OAAmC,IAA/Ba,OAAOC,KAAKd,GAAQe,OAAqB,KAE3C,eAACP,EAAD,WACE,eAACG,EAAD,2BAAoB,qCAAQX,EAAOgB,YACnC,eAACN,EAAD,kCAA0B,qCAAQV,EAAOiB,cACzC,eAACP,EAAD,iCAAyB,qCAAQV,EAAOkB,aACxC,eAACR,EAAD,uCAA+B,qCAAQV,EAAOmB,sBAC9C,eAACT,EAAD,0BAAkB,qCAAQV,EAAOoB,qBCjBxBC,G,MAbC,WACd,OACE,sBAAKC,UAAU,WAAf,UACE,qBAAKA,UAAU,iBACf,qBAAKA,UAAU,iBACf,qBAAKA,UAAU,iBACf,qBAAKA,UAAU,iBACf,qBAAKA,UAAU,iBACf,qBAAKA,UAAU,sB,msBCHrB,IAAMC,EAAUnE,IAAOqD,IAAV,KAUPe,EAAQpE,IAAOqE,IAAV,KAKLC,EAAUtE,IAAOuE,GAAV,KAuEEC,MArDf,WAAiB,IAAD,EACkBjE,mBAAS,IAD3B,mBACP6B,EADO,KACGN,EADH,OAE8BvB,mBAAS,IAFvC,mBAEP+B,EAFO,KAESP,EAFT,OAGcxB,mBAAS,IAHvB,mBAGPqC,EAHO,KAGC6B,EAHD,OAIiBlE,oBAAS,GAJ1B,mBAIPmE,EAJO,KAIEC,EAJF,KAMdnC,qBAAU,WAES,KAAbJ,IAGU,uCAAG,8BAAAK,EAAA,6DACTmC,EADS,sEAC6DtC,EAD7D,kBACuFF,GADvF,SAEMM,IAAMC,IAAIiC,GAFhB,OAEThC,EAFS,OAIf+B,GAAY,GAEZE,YAAW,WACTF,GAAY,GAGZF,EAAU7B,EAAOC,KAAKiC,QAAQxC,GAAgBF,MAC7C,KAXY,2CAAH,oDAcd2C,GAEAC,QAAQC,IAAI,iBACX,CAAC7C,EAAUE,IAGd,IAAM4C,EAAaR,EAAW,cAAC,EAAD,IAAc,cAAC,EAAD,CAAO9B,OAAQA,IAE3D,OACE,eAACuB,EAAD,WACE,8BACE,cAACC,EAAD,CACEe,IAAKC,EACLC,IAAI,mBAGR,gCACE,cAACf,EAAD,qCACA,cAAC,EAAD,CACExC,YAAaA,EACbC,kBAAmBA,IAEpBmD,SC5EMI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.adea30fe.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cryptomonedas.51f1d2ed.png\";","import React, {Fragment, useState} from 'react'\nimport styled from '@emotion/styled'\nimport PropTypes from 'prop-types'\n\nconst Label = styled.label`\n  font-family: 'Bebas Neue', cursive;\n  color: #fff;\n  text-transform: uppercase;\n  font-weight: 900;\n  font-size: 2.4rem;\n  margin-top: 2rem;\n  display: block;\n`\n\nconst SelectTag = styled.select`\n  width: 100%;\n  display: block;\n  padding: 1rem;\n  -webkit-appearance: none;\n  border-radius: 10px;\n  border: none;\n  font-size: 1.2rem;\n`\n\nconst useCurrency = (label, initialState, options) => {\n  // Custom hook state\n  const [state, updateState] = useState(initialState)\n\n  const Selection = () => (\n    <Fragment>\n      <Label>{label}</Label>\n      <SelectTag\n        onChange={e => updateState(e.target.value)}\n        value={state}\n      >\n        <option value=\"\">-- Select a currency --</option>\n        {options.map(option => (\n          <option\n            key={option.cod}\n            value={option.cod}\n          >\n            {option.name}\n          </option>\n        ))\n        }\n      </SelectTag>\n    </Fragment>\n  )\n\n  return [state, Selection, updateState]\n}\n\nuseCurrency.propTypes = {\n  label: PropTypes.string.isRequired,\n  initialState: PropTypes.array.isRequired,\n  options: PropTypes.array.isRequired\n}\n\nexport default useCurrency","import React, {Fragment, useState} from 'react'\nimport styled from '@emotion/styled'\nimport PropTypes from 'prop-types'\n\nconst Label = styled.label`\n  font-family: 'Bebas Neue', cursive;\n  color: #fff;\n  text-transform: uppercase;\n  font-weight: 900;\n  font-size: 2.4rem;\n  margin-top: 2rem;\n  display: block;\n`\n\nconst SelectTag = styled.select`\n  width: 100%;\n  display: block;\n  padding: 1rem;\n  -webkit-appearance: none;\n  border-radius: 10px;\n  border: none;\n  font-size: 1.2rem;\n`\n\nconst useCriptoCurrency = (label, initialState, options) => {\n\n  // Custom hook state\n  const [state, updateState] = useState(initialState)\n\n  const SelectCripto = () => (\n    <Fragment>\n      <Label>{label}</Label>\n      <SelectTag\n        onChange={e => updateState(e.target.value)}\n        value={state}\n      >\n        <option value=\"\">-- Select a cripto --</option>\n        {options.map(option => (\n          <option\n            key={option.CoinInfo.Id}\n            value={option.CoinInfo.Name}\n          >\n            {option.CoinInfo.FullName}\n          </option>\n        ))\n        }\n      </SelectTag>\n    </Fragment>\n  )\n\n  return [state, SelectCripto, updateState]\n}\n\nuseCriptoCurrency.propTypes = {\n  label: PropTypes.string.isRequired,\n  initialState: PropTypes.array.isRequired,\n  options: PropTypes.array.isRequired\n}\n\nexport default useCriptoCurrency","import React from 'react'\nimport styled from '@emotion/styled'\nimport PropTypes from 'prop-types'\n\nconst ErrorMessage = styled.p`\n  background-color: #b7322c;\n  padding: 1rem;\n  color: #fff;\n  font-size: 30px;\n  text-transform: uppercase;\n  font-weight: bold;\n  text-align: center;\n  font-family: 'Bebas Neue', cursive;\n`\n\nconst mError = ({message}) => {\n  return (\n    <ErrorMessage>{message}</ErrorMessage>\n  )\n}\n\nmError.propTypes = {\n  message: PropTypes.string.isRequired\n}\n\nexport default mError\n","import React, {useEffect, useState} from 'react'\nimport styled from '@emotion/styled'\nimport useCurrency from '../hooks/useCurrency'\nimport useCriptoCurrency from '../hooks/useCriptoCurrency'\nimport axios from 'axios'\nimport Error from './Error'\nimport PropTypes from 'prop-types'\n\nconst Button = styled.input`\n  margin-top: 20px;\n  font-weight: 700;\n  font-size: 20px;\n  padding: 10px;\n  background-color: #66a2fe;\n  border: none;\n  width: 100%;\n  border-radius: 10px;\n  color: #fff;\n  transition: all linear 0.25s;\n\n  &:hover{\n    background-color: #326AC0;\n  }\n`\n\nconst Form = ({setCurrency, setCriptoCurrency}) => {\n\n  // Add state for cripto list\n  const [criptoList, saveCriptoList] = useState([])\n  const [error, setError] = useState(false)\n\n  // Currencies\n  const CURRENCIES = [\n    {cod: 'USD', name: 'American Dollar'},\n    {cod: 'COP', name: 'Colombian Peso'},\n    {cod: 'MXN', name: 'Mexican Peso'},\n    {cod: 'EUR', name: 'Euro'},\n  ]\n\n  // Custom Hook for Currencies\n  const [currency, Selection] =\n    useCurrency('Choose your currency', '', CURRENCIES)\n\n  // Custom Hook for Cripto Currencies\n  const [criptoCurrency, SelectCripto] =\n    useCriptoCurrency('Choose your cripto currency', '', criptoList)\n\n  // Get list of cripto currencies\n  useEffect(() => {\n    const getCriptoList = async () => {\n      const URL = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD'\n      const result = await axios.get(URL)\n      saveCriptoList(result.data.Data)\n    }\n    getCriptoList()\n  }, [])\n\n  // Get a Quote currency\n  const quoteCurrency = e => {\n    e.preventDefault()\n\n    // boths input are set\n    if (currency === '' || criptoCurrency === '') {\n      setError(true)\n      return\n    }\n\n    // Pass data to main component\n    setError(false)\n    setCurrency(currency)\n    setCriptoCurrency(criptoCurrency)\n  }\n\n  return (\n    <form\n      onSubmit={quoteCurrency}\n    >\n\n      {error ? <Error message='All fields are required' /> : null}\n\n      <Selection />\n      <SelectCripto />\n\n      <Button\n        type=\"submit\"\n        value=\"Calculate\"\n      />\n    </form>\n  )\n}\n\nForm.propTypes = {\n  setCurrency: PropTypes.func.isRequired,\n  setCriptoCurrency: PropTypes.func.isRequired\n}\n\nexport default Form\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport PropTypes from 'prop-types'\n\nconst DivResult = styled.div`\n  color: #fff;\n  font-family: Arial, Helvetica, sans-serif;\n`\n\nconst Info = styled.p`\n  font-size: 18px;\n\n  span {\n    font-weight:900\n  }\n`\n\nconst Price = styled.p`\n  font-size: 30px;\n\n  span {\n    font-weight:900\n  }\n`\n\nconst Quote = ({result}) => {\n  if (Object.keys(result).length === 0) return null\n  return (\n    <DivResult>\n      <Price>The price is:<span> {result.PRICE}</span></Price>\n      <Info>Higher price of day:<span> {result.HIGHDAY}</span></Info>\n      <Info>Lower price of day:<span> {result.LOWDAY}</span></Info>\n      <Info>Changes on last 24 hours:<span> {result.CHANGEPCT24HOUR}</span></Info>\n      <Info>Last update:<span> {result.LASTUPDATE}</span></Info>\n    </DivResult>\n  )\n}\n\nQuote.propTypes = {\n  result: PropTypes.object.isRequired,\n}\nexport default Quote\n","import React from 'react'\nimport './Spinner.css'\n\nconst Spinner = () => {\n  return (\n    <div className=\"sk-chase\">\n      <div className=\"sk-chase-dot\"></div>\n      <div className=\"sk-chase-dot\"></div>\n      <div className=\"sk-chase-dot\"></div>\n      <div className=\"sk-chase-dot\"></div>\n      <div className=\"sk-chase-dot\"></div>\n      <div className=\"sk-chase-dot\"></div>\n    </div>\n  )\n}\n\nexport default Spinner\n","import React, {useEffect, useState} from 'react'\nimport styled from '@emotion/styled'\nimport image from './cryptomonedas.png'\nimport Form from './components/Form'\nimport axios from 'axios'\nimport Quote from './components/Quote'\nimport Spinner from './components/Spinner'\n\nconst Wrapper = styled.div`\n  max-width: 900px;\n  margin: 0 auto;\n  @media (min-width:992px) {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    column-gap: 2rem;\n  }\n`\n\nconst Image = styled.img`\n  max-width: 100%;\n  margin-top: 5rem;\n`\n\nconst Heading = styled.h1`\n  font-family: 'Bebas Neue', cursive;\n  color: #fff;\n  text-align: left;\n  font-weight: 700;\n  font-size: 50px;\n  margin-bottom: 50px;\n  margin-top: 80px;\n\n  &::after {\n    content: '';\n    width: 100px;\n    height: 6px;\n    background-color: #66A2FE;\n    display: block;\n  }\n`\n\nfunction App () {\n  const [currency, setCurrency] = useState('')\n  const [criptoCurrency, setCriptoCurrency] = useState('')\n  const [result, setResult] = useState({})\n  const [loading, showLoading] = useState(false)\n\n  useEffect(() => {\n    // avoid run on first time\n    if (currency === '') return\n\n    // fecth API to get a quote\n    const getQuote = async () => {\n      const URL = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${ criptoCurrency }&tsyms=${ currency }`\n      const result = await axios.get(URL)\n      // Show spinner\n      showLoading(true)\n\n      setTimeout(() => {\n        showLoading(false)\n\n        // Save Quote result\n        setResult(result.data.DISPLAY[criptoCurrency][currency])\n      }, 2000);\n\n    }\n    getQuote()\n\n    console.log('Quoting...')\n  }, [currency, criptoCurrency])\n\n  // Show Spinner or Result\n  const component = (loading) ? <Spinner /> : <Quote result={result}></Quote>\n\n  return (\n    <Wrapper>\n      <div>\n        <Image\n          src={image}\n          alt=\"Crypto image\"\n        />\n      </div>\n      <div>\n        <Heading>Quote cryptocurrencies</Heading>\n        <Form\n          setCurrency={setCurrency}\n          setCriptoCurrency={setCriptoCurrency}\n        />\n        {component}\n      </div>\n    </Wrapper>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}